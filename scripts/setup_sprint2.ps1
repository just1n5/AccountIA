# üöÄ Setup Script para Sprint 2 - AccountIA (PowerShell)\n# Script de instalaci√≥n y configuraci√≥n r√°pida para Windows\n\nparam(\n    [switch]$Verbose\n)\n\n# Configuraci√≥n de colores para la consola\n$Host.UI.RawUI.ForegroundColor = 'White'\n\nfunction Write-Header {\n    param([string]$Message)\n    Write-Host \"\" -ForegroundColor Blue\n    Write-Host \"================================\" -ForegroundColor Blue\n    Write-Host $Message -ForegroundColor Blue\n    Write-Host \"================================\" -ForegroundColor Blue\n}\n\nfunction Write-Success {\n    param([string]$Message)\n    Write-Host \"‚úÖ $Message\" -ForegroundColor Green\n}\n\nfunction Write-Info {\n    param([string]$Message)\n    Write-Host \"‚ÑπÔ∏è  $Message\" -ForegroundColor Cyan\n}\n\nfunction Write-Warning {\n    param([string]$Message)\n    Write-Host \"‚ö†Ô∏è  $Message\" -ForegroundColor Yellow\n}\n\nfunction Write-Error-Custom {\n    param([string]$Message)\n    Write-Host \"‚ùå $Message\" -ForegroundColor Red\n}\n\nfunction Test-Command {\n    param([string]$Command)\n    try {\n        Get-Command $Command -ErrorAction Stop | Out-Null\n        return $true\n    }\n    catch {\n        return $false\n    }\n}\n\nfunction Main {\n    Write-Header \"SETUP SPRINT 2 - ACCOUNTIA\"\n    \n    Write-Info \"Configurando entorno de desarrollo en Windows...\"\n    Write-Host \"\"\n    \n    # 1. Verificar Node.js\n    Write-Header \"1. VERIFICANDO PREREQUISITOS\"\n    \n    if (Test-Command \"node\") {\n        $nodeVersion = node --version\n        Write-Success \"Node.js instalado: $nodeVersion\"\n    }\n    else {\n        Write-Error-Custom \"Node.js no est√° instalado. Por favor inst√°lalo desde https://nodejs.org\"\n        exit 1\n    }\n    \n    if (Test-Command \"npm\") {\n        $npmVersion = npm --version\n        Write-Success \"npm instalado: v$npmVersion\"\n    }\n    else {\n        Write-Error-Custom \"npm no est√° instalado\"\n        exit 1\n    }\n    \n    if (Test-Command \"python\") {\n        $pythonVersion = python --version\n        Write-Success \"Python instalado: $pythonVersion\"\n    }\n    elseif (Test-Command \"python3\") {\n        $pythonVersion = python3 --version\n        Write-Success \"Python 3 instalado: $pythonVersion\"\n    }\n    else {\n        Write-Error-Custom \"Python no est√° instalado. Por favor inst√°lalo desde https://python.org\"\n        exit 1\n    }\n    \n    if (Test-Command \"docker\") {\n        $dockerVersion = docker --version\n        Write-Success \"Docker instalado: $dockerVersion\"\n        \n        if (Test-Command \"docker-compose\") {\n            Write-Success \"Docker Compose est√° disponible\"\n        }\n        else {\n            Write-Warning \"Docker Compose no encontrado como comando separado (puede estar integrado en Docker)\"\n        }\n    }\n    else {\n        Write-Warning \"Docker no est√° instalado. Se recomienda instalarlo para el desarrollo completo.\"\n    }\n    \n    # 2. Instalar dependencias NPM root\n    Write-Header \"2. INSTALANDO DEPENDENCIAS ROOT\"\n    \n    if (Test-Path \"package.json\") {\n        Write-Info \"Instalando dependencias del proyecto...\"\n        npm install\n        if ($LASTEXITCODE -eq 0) {\n            Write-Success \"Dependencias root instaladas\"\n        }\n        else {\n            Write-Error-Custom \"Error instalando dependencias root\"\n            exit 1\n        }\n    }\n    else {\n        Write-Error-Custom \"package.json no encontrado en el directorio actual\"\n        exit 1\n    }\n    \n    # 3. Instalar dependencias frontend\n    Write-Header \"3. INSTALANDO DEPENDENCIAS FRONTEND\"\n    \n    if (Test-Path \"frontend\") {\n        Push-Location \"frontend\"\n        Write-Info \"Instalando dependencias del frontend...\"\n        npm install\n        if ($LASTEXITCODE -eq 0) {\n            Write-Success \"Dependencias frontend instaladas\"\n        }\n        else {\n            Write-Error-Custom \"Error instalando dependencias frontend\"\n            Pop-Location\n            exit 1\n        }\n        Pop-Location\n    }\n    else {\n        Write-Error-Custom \"Directorio frontend no encontrado\"\n        exit 1\n    }\n    \n    # 4. Configurar archivos de entorno\n    Write-Header \"4. CONFIGURANDO ARCHIVOS DE ENTORNO\"\n    \n    if (-not (Test-Path \".env\") -and (Test-Path \".env.example\")) {\n        Copy-Item \".env.example\" \".env\"\n        Write-Success \"Archivo .env creado desde .env.example\"\n    }\n    elseif (Test-Path \".env\") {\n        Write-Info \"Archivo .env ya existe\"\n    }\n    \n    if (-not (Test-Path \"backend\\.env\") -and (Test-Path \"backend\\.env.example\")) {\n        Copy-Item \"backend\\.env.example\" \"backend\\.env\"\n        Write-Success \"Archivo backend\\.env creado desde backend\\.env.example\"\n    }\n    elseif (Test-Path \"backend\\.env\") {\n        Write-Info \"Archivo backend\\.env ya existe\"\n    }\n    \n    # 5. Crear directorios necesarios\n    Write-Header \"5. CREANDO DIRECTORIOS NECESARIOS\"\n    \n    $dirsToCreate = @(\n        \"backend\\media\",\n        \"backend\\staticfiles\",\n        \"backend\\mock_storage\",\n        \"backend\\logs\",\n        \"logs\",\n        \"backups\"\n    )\n    \n    foreach ($dir in $dirsToCreate) {\n        if (-not (Test-Path $dir)) {\n            New-Item -ItemType Directory -Path $dir -Force | Out-Null\n            Write-Success \"Directorio creado: $dir\"\n        }\n        else {\n            Write-Info \"Directorio ya existe: $dir\"\n        }\n    }\n    \n    # 6. Verificaci√≥n de archivos del Sprint 2\n    Write-Header \"6. VERIFICANDO ARCHIVOS DEL SPRINT 2\"\n    \n    $filesToCheck = @(\n        \"package.json\",\n        \"docker-compose.yml\",\n        \"backend\\apps\\documents\\services\\storage_service.py\",\n        \"backend\\apps\\documents\\tasks.py\",\n        \"backend\\apps\\documents\\views.py\",\n        \"backend\\apps\\documents\\urls.py\",\n        \"frontend\\src\\services\\documentService.ts\",\n        \"frontend\\src\\services\\declarationService.ts\",\n        \"frontend\\src\\components\\declarations\\FileUpload.tsx\",\n        \"frontend\\src\\components\\declarations\\ProcessingStatus.tsx\",\n        \"frontend\\src\\components\\declarations\\DataReview.tsx\",\n        \"frontend\\src\\pages\\DeclarationWizard.tsx\"\n    )\n    \n    $allFilesExist = $true\n    foreach ($file in $filesToCheck) {\n        if (Test-Path $file) {\n            Write-Success \"Archivo encontrado: $file\"\n        }\n        else {\n            Write-Warning \"Archivo faltante: $file\"\n            $allFilesExist = $false\n        }\n    }\n    \n    # 7. Instrucciones finales\n    Write-Header \"7. ¬°SETUP COMPLETADO!\"\n    \n    Write-Host \"\"\n    Write-Success \"‚ú® Configuraci√≥n inicial completada exitosamente\"\n    Write-Host \"\"\n    \n    Write-Info \"üöÄ PR√ìXIMOS PASOS:\"\n    Write-Host \"\"\n    \n    Write-Host \"1. Instalar dependencias Python:\" -ForegroundColor White\n    Write-Host \"   cd backend\" -ForegroundColor Gray\n    Write-Host \"   pip install -r requirements.txt\" -ForegroundColor Gray\n    Write-Host \"   cd ..\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    Write-Host \"2. Iniciar servicios de desarrollo:\" -ForegroundColor White\n    Write-Host \"   npm run docker:up        # Servicios Docker (PostgreSQL, Redis)\" -ForegroundColor Gray\n    Write-Host \"   npm run backend:dev      # Backend Django (en otra terminal)\" -ForegroundColor Gray\n    Write-Host \"   npm run frontend:dev     # Frontend React (en otra terminal)\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    Write-Host \"3. Verificar funcionamiento:\" -ForegroundColor White\n    Write-Host \"   npm run health           # Health check\" -ForegroundColor Gray\n    Write-Host \"   npm run version          # Versi√≥n actual\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    Write-Host \"4. Acceder a la aplicaci√≥n:\" -ForegroundColor White\n    Write-Host \"   Frontend: http://localhost:3000\" -ForegroundColor Gray\n    Write-Host \"   Backend API: http://localhost:8000\" -ForegroundColor Gray\n    Write-Host \"   Admin: http://localhost:8000/admin\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    Write-Host \"5. Comandos √∫tiles:\" -ForegroundColor White\n    Write-Host \"   npm run help             # Ver todos los comandos\" -ForegroundColor Gray\n    Write-Host \"   npm run logs             # Ver logs\" -ForegroundColor Gray\n    Write-Host \"   npm run test             # Ejecutar tests\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    Write-Info \"üìö Documentaci√≥n disponible en:\"\n    Write-Host \"   - README.md\" -ForegroundColor Gray\n    Write-Host \"   - SPRINT2_README.md\" -ForegroundColor Gray\n    Write-Host \"   - SPRINT2_IMPLEMENTATION_SUMMARY.md\" -ForegroundColor Gray\n    Write-Host \"   - docs/\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    Write-Info \"üêõ Si encuentras problemas:\"\n    Write-Host \"   - Revisa PROBLEMAS_SOLUCIONADOS.md\" -ForegroundColor Gray\n    Write-Host \"   - Ejecuta: npm run verify:sprint2:windows\" -ForegroundColor Gray\n    Write-Host \"   - Consulta los logs: npm run logs\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    if ($allFilesExist) {\n        Write-Success \"üéâ ¬°Todos los archivos del Sprint 2 est√°n presentes!\"\n    }\n    else {\n        Write-Warning \"‚ö†Ô∏è  Algunos archivos del Sprint 2 no se encontraron. Revisa la implementaci√≥n.\"\n    }\n    \n    Write-Success \"üéâ ¬°Listo para desarrollar con AccountIA Sprint 2!\"\n}\n\n# Ejecutar funci√≥n principal\ntry {\n    Main\n}\ncatch {\n    Write-Error-Custom \"Error durante la configuraci√≥n: $($_.Exception.Message)\"\n    exit 1\n}