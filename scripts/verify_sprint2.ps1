# üöÄ Script de Verificaci√≥n del Sprint 2 - AccountIA (PowerShell)\n# Script para verificar que todas las funcionalidades del Sprint 2 est√°n implementadas\n\nparam(\n    [switch]$Verbose\n)\n\nfunction Write-Header {\n    param([string]$Message)\n    Write-Host \"\" -ForegroundColor Blue\n    Write-Host \"================================\" -ForegroundColor Blue\n    Write-Host $Message -ForegroundColor Blue\n    Write-Host \"================================\" -ForegroundColor Blue\n}\n\nfunction Write-Success {\n    param([string]$Message)\n    Write-Host \"‚úÖ $Message\" -ForegroundColor Green\n}\n\nfunction Write-Info {\n    param([string]$Message)\n    Write-Host \"‚ÑπÔ∏è  $Message\" -ForegroundColor Cyan\n}\n\nfunction Write-Warning {\n    param([string]$Message)\n    Write-Host \"‚ö†Ô∏è  $Message\" -ForegroundColor Yellow\n}\n\nfunction Write-Error-Custom {\n    param([string]$Message)\n    Write-Host \"‚ùå $Message\" -ForegroundColor Red\n}\n\nfunction Test-Command {\n    param([string]$Command)\n    try {\n        Get-Command $Command -ErrorAction Stop | Out-Null\n        return $true\n    }\n    catch {\n        return $false\n    }\n}\n\nfunction Test-ServiceRunning {\n    param([string]$Url)\n    try {\n        $response = Invoke-WebRequest -Uri $Url -Method Get -TimeoutSec 5 -ErrorAction Stop\n        return $response.StatusCode -eq 200\n    }\n    catch {\n        return $false\n    }\n}\n\nfunction Main {\n    Write-Header \"VERIFICACI√ìN DEL SPRINT 2 - ACCOUNTIA\"\n    \n    Write-Info \"Iniciando verificaci√≥n completa del sistema...\"\n    Write-Host \"\"\n    \n    # 1. Verificar prerequisitos\n    Write-Header \"1. VERIFICACI√ìN DE PREREQUISITOS\"\n    \n    if (Test-Command \"node\") {\n        $nodeVersion = node --version\n        Write-Success \"Node.js instalado: $nodeVersion\"\n    }\n    else {\n        Write-Error-Custom \"Node.js no est√° instalado\"\n        return\n    }\n    \n    if (Test-Command \"npm\") {\n        $npmVersion = npm --version\n        Write-Success \"npm instalado: v$npmVersion\"\n    }\n    else {\n        Write-Error-Custom \"npm no est√° instalado\"\n        return\n    }\n    \n    if (Test-Command \"python\") {\n        $pythonVersion = python --version\n        Write-Success \"Python instalado: $pythonVersion\"\n    }\n    elseif (Test-Command \"python3\") {\n        $pythonVersion = python3 --version\n        Write-Success \"Python 3 instalado: $pythonVersion\"\n    }\n    else {\n        Write-Error-Custom \"Python no est√° instalado\"\n        return\n    }\n    \n    if (Test-Command \"docker\") {\n        $dockerVersion = docker --version\n        Write-Success \"Docker instalado: $dockerVersion\"\n    }\n    else {\n        Write-Warning \"Docker no est√° instalado (opcional para desarrollo)\"\n    }\n    \n    # 2. Verificar estructura de archivos\n    Write-Header \"2. VERIFICACI√ìN DE ESTRUCTURA DE ARCHIVOS\"\n    \n    if (Test-Path \"backend\") {\n        Write-Success \"Directorio backend existe\"\n    }\n    else {\n        Write-Error-Custom \"Directorio backend no encontrado\"\n        return\n    }\n    \n    if (Test-Path \"frontend\") {\n        Write-Success \"Directorio frontend existe\"\n    }\n    else {\n        Write-Error-Custom \"Directorio frontend no encontrado\"\n        return\n    }\n    \n    # Verificar archivos espec√≠ficos del Sprint 2\n    $filesToCheck = @(\n        \"package.json\",\n        \"docker-compose.yml\",\n        \"backend\\apps\\documents\\services\\storage_service.py\",\n        \"backend\\apps\\documents\\tasks.py\",\n        \"backend\\apps\\documents\\views.py\",\n        \"backend\\apps\\documents\\urls.py\",\n        \"frontend\\src\\services\\documentService.ts\",\n        \"frontend\\src\\services\\declarationService.ts\",\n        \"frontend\\src\\components\\declarations\\FileUpload.tsx\",\n        \"frontend\\src\\components\\declarations\\ProcessingStatus.tsx\",\n        \"frontend\\src\\components\\declarations\\DataReview.tsx\",\n        \"frontend\\src\\pages\\DeclarationWizard.tsx\"\n    )\n    \n    $filesFound = 0\n    foreach ($file in $filesToCheck) {\n        if (Test-Path $file) {\n            Write-Success \"Archivo encontrado: $file\"\n            $filesFound++\n        }\n        else {\n            Write-Error-Custom \"Archivo faltante: $file\"\n        }\n    }\n    \n    # 3. Verificar scripts NPM\n    Write-Header \"3. VERIFICACI√ìN DE SCRIPTS NPM\"\n    \n    $scriptsToCheck = @(\n        \"documents:test\",\n        \"documents:shell\",\n        \"gcs:test\",\n        \"celery:test-task\",\n        \"health:backend\",\n        \"health:frontend\",\n        \"version\"\n    )\n    \n    if (Test-Path \"package.json\") {\n        $packageJson = Get-Content \"package.json\" -Raw\n        \n        foreach ($script in $scriptsToCheck) {\n            if ($packageJson -match \"\\\"$script\\\"\") {\n                Write-Success \"Script encontrado: $script\"\n            }\n            else {\n                Write-Warning \"Script faltante: $script\"\n            }\n        }\n    }\n    \n    # 4. Verificar servicios (si est√°n corriendo)\n    Write-Header \"4. VERIFICACI√ìN DE SERVICIOS\"\n    \n    Write-Info \"Verificando si los servicios est√°n corriendo...\"\n    \n    if (Test-ServiceRunning \"http://localhost:8000/health/\") {\n        Write-Success \"Backend corriendo en puerto 8000\"\n    }\n    else {\n        Write-Warning \"Backend no est√° corriendo (esto es normal si no has iniciado los servicios)\"\n    }\n    \n    if (Test-ServiceRunning \"http://localhost:3000\") {\n        Write-Success \"Frontend corriendo en puerto 3000\"\n    }\n    else {\n        Write-Warning \"Frontend no est√° corriendo (esto es normal si no has iniciado los servicios)\"\n    }\n    \n    # 5. Verificar configuraci√≥n\n    Write-Header \"5. VERIFICACI√ìN DE CONFIGURACI√ìN\"\n    \n    if (Test-Path \".env\") {\n        Write-Success \"Archivo .env encontrado\"\n    }\n    else {\n        Write-Warning \"Archivo .env no encontrado\"\n        if (Test-Path \".env.example\") {\n            Write-Info \"Se puede crear desde .env.example\"\n        }\n    }\n    \n    if (Test-Path \"backend\\.env\") {\n        Write-Success \"Archivo backend\\.env encontrado\"\n    }\n    else {\n        Write-Warning \"Archivo backend\\.env no encontrado\"\n        if (Test-Path \"backend\\.env.example\") {\n            Write-Info \"Se puede crear desde backend\\.env.example\"\n        }\n    }\n    \n    # 6. Resumen y recomendaciones\n    Write-Header \"6. RESUMEN Y RECOMENDACIONES\"\n    \n    Write-Info \"Verificaci√≥n completada. Resumen:\"\n    Write-Host \"\"\n    \n    $totalFiles = $filesToCheck.Count\n    $percentage = [math]::Round(($filesFound / $totalFiles) * 100, 2)\n    \n    Write-Host \"üìä Archivos del Sprint 2: $filesFound/$totalFiles ($percentage%)\" -ForegroundColor White\n    \n    if ($filesFound -eq $totalFiles) {\n        Write-Success \"‚úÖ Estructura de archivos del Sprint 2 completa\"\n        Write-Success \"‚úÖ Servicios de documentos implementados\"\n        Write-Success \"‚úÖ Componentes de frontend creados\"\n        Write-Success \"‚úÖ Flujo de carga de archivos implementado\"\n        Write-Success \"‚úÖ Scripts NPM configurados\"\n    }\n    else {\n        Write-Warning \"‚ö†Ô∏è  Algunos archivos del Sprint 2 est√°n faltantes\"\n    }\n    \n    Write-Host \"\"\n    Write-Header \"PR√ìXIMOS PASOS RECOMENDADOS\"\n    \n    Write-Host \"1. Instalar dependencias:\" -ForegroundColor White\n    Write-Host \"   npm install\" -ForegroundColor Gray\n    Write-Host \"   cd frontend && npm install && cd ..\" -ForegroundColor Gray\n    Write-Host \"   cd backend && pip install -r requirements.txt && cd ..\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    Write-Host \"2. Iniciar servicios de desarrollo:\" -ForegroundColor White\n    Write-Host \"   npm run docker:up        # Inicia PostgreSQL y Redis\" -ForegroundColor Gray\n    Write-Host \"   npm run backend:dev      # Inicia backend Django\" -ForegroundColor Gray\n    Write-Host \"   npm run frontend:dev     # Inicia frontend React\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    Write-Host \"3. Verificar funcionamiento:\" -ForegroundColor White\n    Write-Host \"   npm run health           # Verificar salud de servicios\" -ForegroundColor Gray\n    Write-Host \"   npm run version          # Ver versi√≥n actual\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    Write-Host \"4. Ver logs:\" -ForegroundColor White\n    Write-Host \"   npm run logs             # Ver todos los logs\" -ForegroundColor Gray\n    Write-Host \"   npm run logs:backend     # Ver logs del backend\" -ForegroundColor Gray\n    Write-Host \"   npm run logs:frontend    # Ver logs del frontend\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    Write-Host \"5. Para desarrollo:\" -ForegroundColor White\n    Write-Host \"   npm run lint             # Linting de c√≥digo\" -ForegroundColor Gray\n    Write-Host \"   npm run test             # Ejecutar tests\" -ForegroundColor Gray\n    Write-Host \"   npm run format           # Formatear c√≥digo\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    Write-Info \"üéâ ¬°Sprint 2 verificado en Windows!\"\n    Write-Info \"üìö Consulta SPRINT2_README.md para m√°s detalles\"\n    Write-Info \"üêõ Si encuentras problemas, revisa PROBLEMAS_SOLUCIONADOS.md\"\n    \n    Write-Host \"\"\n    Write-Header \"VERIFICACI√ìN COMPLETADA\"\n}\n\n# Ejecutar funci√≥n principal\ntry {\n    Main\n}\ncatch {\n    Write-Error-Custom \"Error durante la verificaci√≥n: $($_.Exception.Message)\"\n    exit 1\n}