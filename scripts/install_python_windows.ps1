# üîß Script de Instalaci√≥n de Dependencias Python para Windows\n# Instala dependencias de forma robusta evitando errores de compilaci√≥n\n\nparam(\n    [switch]$Force,\n    [switch]$Verbose\n)\n\n# Colores para output\nfunction Write-Success { param([string]$Message); Write-Host \"‚úÖ $Message\" -ForegroundColor Green }\nfunction Write-Info { param([string]$Message); Write-Host \"‚ÑπÔ∏è  $Message\" -ForegroundColor Cyan }\nfunction Write-Warning { param([string]$Message); Write-Host \"‚ö†Ô∏è  $Message\" -ForegroundColor Yellow }\nfunction Write-Error-Custom { param([string]$Message); Write-Host \"‚ùå $Message\" -ForegroundColor Red }\nfunction Write-Header { param([string]$Message); Write-Host \"\"; Write-Host \"=== $Message ===\" -ForegroundColor Blue; Write-Host \"\" }\n\nfunction Install-PythonDependencies {\n    Write-Header \"INSTALACI√ìN DE DEPENDENCIAS PYTHON PARA WINDOWS\"\n    \n    # Verificar que estamos en el directorio backend\n    if (-not (Test-Path \"requirements.txt\") -and -not (Test-Path \"requirements_windows.txt\")) {\n        Write-Error-Custom \"No se encontraron archivos requirements. Aseg√∫rate de estar en el directorio backend.\"\n        exit 1\n    }\n    \n    # Verificar Python\n    try {\n        $pythonVersion = python --version 2>&1\n        Write-Success \"Python encontrado: $pythonVersion\"\n    }\n    catch {\n        Write-Error-Custom \"Python no encontrado. Instala Python desde python.org o Microsoft Store\"\n        exit 1\n    }\n    \n    # Actualizar pip\n    Write-Info \"Actualizando pip...\"\n    python -m pip install --upgrade pip\n    \n    if ($LASTEXITCODE -eq 0) {\n        Write-Success \"pip actualizado exitosamente\"\n    }\n    else {\n        Write-Warning \"Error actualizando pip, continuando...\"\n    }\n    \n    # Instalar wheel y setuptools primero\n    Write-Info \"Instalando herramientas de build...\"\n    python -m pip install --upgrade wheel setuptools\n    \n    # Decidir qu√© requirements usar\n    $requirementsFile = \"\"\n    if (Test-Path \"requirements_windows.txt\") {\n        $requirementsFile = \"requirements_windows.txt\"\n        Write-Info \"Usando requirements_windows.txt (optimizado para Windows)\"\n    }\n    elseif (Test-Path \"requirements.txt\") {\n        $requirementsFile = \"requirements.txt\"\n        Write-Info \"Usando requirements.txt (gen√©rico)\"\n    }\n    \n    # Instalar dependencias cr√≠ticas primero (orden espec√≠fico para Windows)\n    Write-Header \"INSTALANDO DEPENDENCIAS CR√çTICAS\"\n    \n    $criticalPackages = @(\n        \"numpy==1.24.3\",\n        \"pandas==2.0.3\",\n        \"Django==4.2.16\",\n        \"djangorestframework==3.15.2\",\n        \"psycopg2-binary==2.9.9\",\n        \"celery==5.3.4\",\n        \"redis==5.0.1\"\n    )\n    \n    foreach ($package in $criticalPackages) {\n        Write-Info \"Instalando $package...\"\n        python -m pip install $package\n        \n        if ($LASTEXITCODE -eq 0) {\n            Write-Success \"$package instalado exitosamente\"\n        }\n        else {\n            Write-Warning \"Error instalando $package, se intentar√° con el archivo requirements\"\n        }\n    }\n    \n    # Instalar el resto de dependencias\n    Write-Header \"INSTALANDO RESTO DE DEPENDENCIAS\"\n    \n    Write-Info \"Instalando desde $requirementsFile...\"\n    \n    # Usar --only-binary para evitar compilaci√≥n\n    python -m pip install -r $requirementsFile --only-binary=all --prefer-binary\n    \n    if ($LASTEXITCODE -eq 0) {\n        Write-Success \"Todas las dependencias instaladas exitosamente\"\n    }\n    else {\n        Write-Warning \"Algunas dependencias fallaron. Intentando instalaci√≥n individual...\"\n        \n        # Leer requirements y instalar uno por uno\n        $requirements = Get-Content $requirementsFile | Where-Object { \n            $_ -notmatch '^#' -and $_ -notmatch '^\\s*$' \n        }\n        \n        foreach ($req in $requirements) {\n            $package = $req.Split('=')[0].Split('>')[0].Split('<')[0].Split('!')[0].Trim()\n            \n            if ($package) {\n                Write-Info \"Instalando $package...\"\n                python -m pip install $req --prefer-binary\n                \n                if ($LASTEXITCODE -eq 0) {\n                    Write-Success \"$package instalado\"\n                }\n                else {\n                    Write-Warning \"$package fall√≥, continuando...\"\n                }\n            }\n        }\n    }\n    \n    # Verificar instalaciones cr√≠ticas\n    Write-Header \"VERIFICANDO INSTALACIONES CR√çTICAS\"\n    \n    $criticalImports = @(\n        @{ Module = \"django\"; Command = \"import django; print('Django:', django.VERSION)\" },\n        @{ Module = \"pandas\"; Command = \"import pandas as pd; print('Pandas:', pd.__version__)\" },\n        @{ Module = \"numpy\"; Command = \"import numpy as np; print('NumPy:', np.__version__)\" },\n        @{ Module = \"celery\"; Command = \"import celery; print('Celery:', celery.VERSION)\" },\n        @{ Module = \"redis\"; Command = \"import redis; print('Redis:', redis.VERSION)\" }\n    )\n    \n    foreach ($import in $criticalImports) {\n        try {\n            $result = python -c $import.Command 2>&1\n            if ($LASTEXITCODE -eq 0) {\n                Write-Success \"$($import.Module): $result\"\n            }\n            else {\n                Write-Warning \"$($import.Module): Error al verificar\"\n            }\n        }\n        catch {\n            Write-Warning \"$($import.Module): No se pudo verificar\"\n        }\n    }\n    \n    # Listar paquetes instalados\n    Write-Header \"RESUMEN DE INSTALACI√ìN\"\n    \n    $installedPackages = python -m pip list\n    $packageCount = ($installedPackages | Measure-Object -Line).Lines - 2  # Restar headers\n    \n    Write-Success \"$packageCount paquetes instalados exitosamente\"\n    \n    if ($Verbose) {\n        Write-Info \"Paquetes instalados:\"\n        Write-Host $installedPackages -ForegroundColor Gray\n    }\n    \n    # Verificar Django\n    Write-Info \"Verificando Django...\"\n    try {\n        python -c \"import django; print('Django versi√≥n:', django.get_version())\"\n        Write-Success \"Django funcional\"\n    }\n    catch {\n        Write-Error-Custom \"Django no funcional\"\n    }\n    \n    Write-Header \"INSTALACI√ìN COMPLETADA\"\n    Write-Success \"Dependencias Python instaladas para Windows\"\n    Write-Info \"Puedes continuar con: cd .. && npm run docker:up\"\n}\n\n# Ejecutar instalaci√≥n\ntry {\n    Install-PythonDependencies\n}\ncatch {\n    Write-Error-Custom \"Error durante la instalaci√≥n: $($_.Exception.Message)\"\n    exit 1\n}