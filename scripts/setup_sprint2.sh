#!/bin/bash\n\n# üöÄ Setup Script para Sprint 2 - AccountIA\n# Script de instalaci√≥n y configuraci√≥n r√°pida\n\nset -e\n\n# Colors\nGREEN='\\033[0;32m'\nBLUE='\\033[0;34m'\nYELLOW='\\033[1;33m'\nRED='\\033[0;31m'\nNC='\\033[0m'\n\nprint_header() {\n    echo -e \"${BLUE}================================${NC}\"\n    echo -e \"${BLUE}$1${NC}\"\n    echo -e \"${BLUE}================================${NC}\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}‚úÖ $1${NC}\"\n}\n\nprint_info() {\n    echo -e \"${BLUE}‚ÑπÔ∏è  $1${NC}\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}‚ö†Ô∏è  $1${NC}\"\n}\n\nprint_error() {\n    echo -e \"${RED}‚ùå $1${NC}\"\n}\n\n# Funci√≥n para verificar si un comando existe\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\nmain() {\n    print_header \"SETUP SPRINT 2 - ACCOUNTIA\"\n    \n    print_info \"Configurando entorno de desarrollo...\"\n    echo \"\"\n    \n    # 1. Instalar dependencias NPM root\n    print_header \"1. INSTALANDO DEPENDENCIAS ROOT\"\n    if [ -f \"package.json\" ]; then\n        npm install\n        print_success \"Dependencias root instaladas\"\n    else\n        print_error \"package.json no encontrado\"\n        exit 1\n    fi\n    \n    # 2. Instalar dependencias frontend\n    print_header \"2. INSTALANDO DEPENDENCIAS FRONTEND\"\n    if [ -d \"frontend\" ]; then\n        cd frontend\n        npm install\n        cd ..\n        print_success \"Dependencias frontend instaladas\"\n    else\n        print_error \"Directorio frontend no encontrado\"\n        exit 1\n    fi\n    \n    # 3. Configurar archivos de entorno\n    print_header \"3. CONFIGURANDO ARCHIVOS DE ENTORNO\"\n    \n    if [ ! -f \".env\" ] && [ -f \".env.example\" ]; then\n        cp .env.example .env\n        print_success \"Archivo .env creado desde .env.example\"\n    fi\n    \n    if [ ! -f \"backend/.env\" ] && [ -f \"backend/.env.example\" ]; then\n        cp backend/.env.example backend/.env\n        print_success \"Archivo backend/.env creado desde backend/.env.example\"\n    fi\n    \n    # 4. Verificar Docker\n    print_header \"4. VERIFICANDO DOCKER\"\n    \n    if command_exists docker; then\n        print_success \"Docker est√° instalado\"\n        \n        if command_exists docker-compose; then\n            print_success \"Docker Compose est√° instalado\"\n        else\n            print_warning \"Docker Compose no encontrado, pero Docker est√° disponible\"\n        fi\n    else\n        print_warning \"Docker no est√° instalado. Necesitar√°s instalarlo para usar servicios completos.\"\n    fi\n    \n    # 5. Crear directorios necesarios\n    print_header \"5. CREANDO DIRECTORIOS\"\n    \n    DIRS_TO_CREATE=(\n        \"backend/media\"\n        \"backend/staticfiles\"\n        \"backend/mock_storage\"\n        \"backend/logs\"\n        \"logs\"\n        \"backups\"\n    )\n    \n    for dir in \"${DIRS_TO_CREATE[@]}\"; do\n        if [ ! -d \"$dir\" ]; then\n            mkdir -p \"$dir\"\n            print_success \"Directorio creado: $dir\"\n        else\n            print_info \"Directorio ya existe: $dir\"\n        fi\n    done\n    \n    # 6. Configuraci√≥n inicial de backend\n    print_header \"6. CONFIGURACI√ìN INICIAL BACKEND\"\n    \n    if [ -d \"backend\" ]; then\n        print_info \"Configurando backend...\"\n        \n        # Verificar si Python est√° disponible\n        if command_exists python3; then\n            print_success \"Python 3 disponible\"\n        elif command_exists python; then\n            print_success \"Python disponible\"\n        else\n            print_error \"Python no est√° instalado\"\n            exit 1\n        fi\n        \n        # Informar sobre instalaci√≥n de dependencias Python\n        print_info \"Para instalar dependencias Python, ejecuta:\"\n        echo \"   cd backend && pip install -r requirements.txt\"\n        \n    else\n        print_error \"Directorio backend no encontrado\"\n        exit 1\n    fi\n    \n    # 7. Verificaci√≥n final\n    print_header \"7. VERIFICACI√ìN FINAL\"\n    \n    # Ejecutar script de verificaci√≥n si existe\n    if [ -f \"scripts/verify_sprint2.sh\" ]; then\n        print_info \"Ejecutando verificaci√≥n del Sprint 2...\"\n        bash scripts/verify_sprint2.sh\n    else\n        print_warning \"Script de verificaci√≥n no encontrado\"\n    fi\n    \n    # 8. Instrucciones finales\n    print_header \"8. ¬°SETUP COMPLETADO!\"\n    \n    echo \"\"\n    print_success \"‚ú® Configuraci√≥n inicial completada exitosamente\"\n    echo \"\"\n    \n    print_info \"üöÄ PR√ìXIMOS PASOS:\"\n    echo \"\"\n    echo \"1. Instalar dependencias Python:\"\n    echo \"   cd backend\"\n    echo \"   pip install -r requirements.txt\"\n    echo \"   cd ..\"\n    echo \"\"\n    \n    echo \"2. Iniciar servicios de desarrollo:\"\n    echo \"   npm run dev              # Todos los servicios\"\n    echo \"   # O por separado:\"\n    echo \"   npm run docker:up        # Servicios Docker (DB, Redis)\"\n    echo \"   npm run backend:dev      # Backend Django\"\n    echo \"   npm run frontend:dev     # Frontend React\"\n    echo \"\"\n    \n    echo \"3. Verificar funcionamiento:\"\n    echo \"   npm run health           # Health check\"\n    echo \"   npm run version          # Versi√≥n actual\"\n    echo \"\"\n    \n    echo \"4. Acceder a la aplicaci√≥n:\"\n    echo \"   Frontend: http://localhost:3000\"\n    echo \"   Backend API: http://localhost:8000\"\n    echo \"   Admin: http://localhost:8000/admin\"\n    echo \"\"\n    \n    echo \"5. Comandos √∫tiles:\"\n    echo \"   npm run help             # Ver todos los comandos\"\n    echo \"   npm run logs             # Ver logs\"\n    echo \"   npm run test             # Ejecutar tests\"\n    echo \"\"\n    \n    print_info \"üìö Documentaci√≥n disponible en:\"\n    echo \"   - README.md\"\n    echo \"   - SPRINT2_IMPLEMENTATION_SUMMARY.md\"\n    echo \"   - docs/\"\n    echo \"\"\n    \n    print_info \"üêõ Si encuentras problemas:\"\n    echo \"   - Revisa PROBLEMAS_SOLUCIONADOS.md\"\n    echo \"   - Ejecuta: bash scripts/verify_sprint2.sh\"\n    echo \"   - Consulta los logs: npm run logs\"\n    echo \"\"\n    \n    print_success \"üéâ ¬°Listo para desarrollar con AccountIA Sprint 2!\"\n}\n\n# Ejecutar funci√≥n principal\nmain \"$@\"