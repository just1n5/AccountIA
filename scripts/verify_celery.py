#!/usr/bin/env python3
"""
Script de verificaci√≥n de Celery y Redis
"""

import os
import sys
import time
from pathlib import Path

# Agregar el directorio ra√≠z del proyecto al path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

def check_redis_connection():
    """Verificar conexi√≥n a Redis"""
    print("üîç Verificando conexi√≥n a Redis...")
    
    try:
        import redis
        
        # Intentar conectar a Redis
        redis_url = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
        r = redis.from_url(redis_url)
        
        # Test b√°sico
        r.ping()
        
        # Test de escritura/lectura
        test_key = 'accountia:test'
        test_value = 'redis_working'
        r.setex(test_key, 10, test_value)  # Expira en 10 segundos
        
        if r.get(test_key).decode() == test_value:
            print(f"  ‚úÖ Redis funcionando correctamente")
            print(f"  ‚úÖ URL: {redis_url}")
            r.delete(test_key)  # Limpiar
            return True
        else:
            print(f"  ‚ùå Error en test de escritura/lectura")
            return False
            
    except ImportError:
        print("  ‚ùå redis no instalado")
        print("  üí° Ejecuta: pip install redis")
        return False
    except Exception as e:
        print(f"  ‚ùå Error de conexi√≥n a Redis: {str(e)}")
        return False

def check_celery_worker():
    """Verificar que Celery worker est√© activo"""
    print("\nüîç Verificando Celery worker...")
    
    try:
        from celery import Celery
        
        # Configurar Celery app
        app = Celery('accountia')
        broker_url = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
        app.conf.broker_url = broker_url
        app.conf.result_backend = broker_url
        
        # Verificar workers activos
        inspect = app.control.inspect()
        
        # Dar tiempo para la conexi√≥n
        active_workers = inspect.active()
        
        if active_workers:
            print(f"  ‚úÖ Workers activos: {list(active_workers.keys())}")
            
            # Verificar estad√≠sticas
            stats = inspect.stats()
            if stats:
                for worker_name, worker_stats in stats.items():
                    print(f"  ‚úÖ Worker {worker_name}: {worker_stats.get('total', 'N/A')} tareas procesadas")
            
            return True
        else:
            print("  ‚ùå No hay workers activos")
            print("  üí° Aseg√∫rate de que el contenedor celery_worker est√© ejecut√°ndose")
            return False
            
    except ImportError:
        print("  ‚ùå celery no instalado")
        print("  üí° Ejecuta: pip install celery")
        return False
    except Exception as e:
        print(f"  ‚ùå Error conectando a Celery: {str(e)}")
        return False

def test_celery_task():
    """Enviar una tarea de prueba a Celery"""
    print("\nüîç Probando env√≠o de tarea a Celery...")
    
    try:
        from celery import Celery
        
        # Configurar Celery app
        app = Celery('accountia')
        broker_url = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
        app.conf.broker_url = broker_url
        app.conf.result_backend = broker_url
        
        # Definir tarea de prueba
        @app.task
        def test_task(message):
            return f"Test task received: {message}"
        
        # Enviar tarea
        result = test_task.delay("Hello from AccountIA!")
        
        print(f"  ‚úÖ Tarea enviada con ID: {result.id}")
        
        # Esperar resultado (m√°ximo 10 segundos)
        try:
            task_result = result.get(timeout=10)
            print(f"  ‚úÖ Resultado de la tarea: {task_result}")
            return True
        except Exception as e:
            print(f"  ‚ö†Ô∏è Tarea enviada pero no se pudo obtener resultado: {str(e)}")
            print("  üí° Esto puede ser normal si el worker no est√° configurado para esta tarea espec√≠fica")
            return True  # La tarea se envi√≥ correctamente
            
    except Exception as e:
        print(f"  ‚ùå Error enviando tarea: {str(e)}")
        return False

def check_docker_services():
    """Verificar que los servicios de Docker est√©n ejecut√°ndose"""
    print("\nüê≥ Verificando servicios de Docker...")
    
    import subprocess
    
    services_to_check = [
        'accountia_redis',
        'accountia_celery_worker', 
        'accountia_celery_beat'
    ]
    
    running_services = []
    
    for service in services_to_check:
        try:
            result = subprocess.run(
                ['docker', 'ps', '--filter', f'name={service}', '--format', 'table {{.Names}}\t{{.Status}}'],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if service in result.stdout and 'Up' in result.stdout:
                print(f"  ‚úÖ {service}: Running")
                running_services.append(service)
            else:
                print(f"  ‚ùå {service}: Not running")
                
        except subprocess.TimeoutExpired:
            print(f"  ‚ö†Ô∏è {service}: Timeout checking status")
        except Exception as e:
            print(f"  ‚ùå {service}: Error checking status - {str(e)}")
    
    return len(running_services) == len(services_to_check)

def main():
    """Funci√≥n principal"""
    print("üöÄ AccountIA - Verificaci√≥n de Celery y Redis\n")
    
    # Cargar variables de entorno desde .env
    env_file = project_root / '.env'
    if env_file.exists():
        print(f"üìã Cargando variables desde: {env_file}\n")
        # Cargar manualmente el archivo .env
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
    else:
        print("‚ö†Ô∏è Archivo .env no encontrado\n")
    
    # Ejecutar verificaciones
    checks = [
        check_docker_services(),
        check_redis_connection(),
        check_celery_worker(),
        test_celery_task()
    ]
    
    # Resumen
    print("\n" + "="*60)
    if all(checks):
        print("üéâ ¬°Todas las verificaciones pasaron! Celery y Redis est√°n configurados correctamente.")
        print("\nüí° Comandos √∫tiles:")
        print("   npm run celery:worker    # Ver logs del worker")
        print("   npm run celery:beat      # Ver logs del beat scheduler") 
        print("   npm run celery:status    # Ver tareas activas")
        print("   npm run redis:cli        # Acceder a Redis CLI")
    else:
        print("‚ùå Algunas verificaciones fallaron.")
        print("\nüí° Pasos para solucionar:")
        print("   1. Ejecutar: npm run dev (para iniciar todos los servicios)")
        print("   2. Verificar logs: npm run logs")
        print("   3. Verificar servicios espec√≠ficos:")
        print("      npm run celery:worker")
        print("      npm run celery:beat")
        print("   4. Reiniciar si es necesario: npm run restart")
    
    print("="*60)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Verificaci√≥n cancelada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {str(e)}")
        sys.exit(1)
