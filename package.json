{
  "name": "accountia",
  "version": "1.0.0",
  "description": "AccountIA - Asesor Tributario Inteligente",
  "main": "index.js",
  "type": "commonjs",
  "private": true,
  "workspaces": [
    "frontend"
  ],
  "scripts": {
    "// === DESARROLLO GENERAL ===": "",
    "dev": "set PYTHONIOENCODING=utf-8&& set PYTHONUTF8=1&& set PYTHONLEGACYWINDOWSSTDIO=1&& concurrently \"npm run backend:dev\" \"npm run frontend:dev\" \"npm run celery:dev\"",
    "dev:windows": "powershell -ExecutionPolicy Bypass -File start_dev_windows.ps1",
    "dev:safe": "set PYTHONIOENCODING=utf-8&& set PYTHONUTF8=1&& concurrently \"npm run backend:dev\" \"npm run frontend:dev\"",
    "setup": "npm run backend:setup && npm run frontend:setup",
    "clean": "npm run backend:clean && npm run frontend:clean",
    "stop": "npm run docker:stop",
    
    "// === FRONTEND ===": "",
    "frontend:dev": "cd frontend && npm run dev",
    "frontend:build": "cd frontend && npm run build",
    "frontend:preview": "cd frontend && npm run preview",
    "frontend:setup": "cd frontend && npm install",
    "frontend:clean": "cd frontend && rm -rf node_modules dist && npm install",
    "frontend:test": "cd frontend && npm run test",
    "frontend:lint": "cd frontend && npm run lint",
    
    "// === BACKEND ===": "",
    "backend:dev": "cd backend && python manage.py runserver 0.0.0.0:8000",
    "backend:setup": "npm run backend:install && npm run backend:migrate && npm run backend:collectstatic",
    "backend:install": "cd backend && pip install -r requirements.txt",
    "backend:install:windows": "powershell -ExecutionPolicy Bypass -File scripts/install_python_windows.ps1",
    "backend:install:simple": "cd backend && powershell -ExecutionPolicy Bypass -File ../scripts/install_python_simple.ps1",
    "backend:migrate": "cd backend && python manage.py migrate",
    "backend:makemigrations": "cd backend && python manage.py makemigrations",
    "backend:collectstatic": "cd backend && python manage.py collectstatic --noinput",
    "backend:shell": "cd backend && python manage.py shell",
    "backend:clean": "cd backend && find . -name '*.pyc' -delete && find . -name '__pycache__' -delete",
    "backend:test": "cd backend && python manage.py test",
    "backend:coverage": "cd backend && coverage run --source='.' manage.py test && coverage report",
    
    "// === DOCKER ===": "",
    "docker:up": "docker-compose up -d",
    "docker:stop": "docker-compose down",
    "docker:restart": "npm run docker:stop && npm run docker:up",
    "docker:build": "docker-compose build",
    "docker:build:prod": "docker-compose -f docker-compose.prod.yml build",
    "docker:clean": "docker-compose down && docker volume prune -f && docker image prune -f",
    "docker:reset": "npm run docker:clean && npm run setup",
    
    "// === DATABASE ===": "",
    "db:migrate": "docker-compose exec backend python manage.py migrate",
    "db:makemigrations": "docker-compose exec backend python manage.py makemigrations",
    "db:seed": "docker-compose exec backend python manage.py loaddata fixtures/initial_users.json && docker-compose exec backend python manage.py loaddata fixtures/tax_rules.json",
    "db:shell": "docker-compose exec postgres psql -U accountia_user -d accountia_dev",
    "db:backup": "node scripts/backup-db.js",
    "db:restore": "node scripts/restore-db.js",
    "db:reset": "docker-compose exec backend python manage.py flush --noinput",
    
    "// === CELERY ===": "",
    "celery:dev": "cd backend && celery -A config worker --loglevel=info",
    "celery:worker": "docker-compose logs -f celery_worker",
    "celery:beat": "docker-compose logs -f celery_beat",
    "celery:status": "docker-compose exec celery_worker celery -A config inspect active",
    "celery:monitor": "docker-compose exec backend celery -A config flower --port=5555",
    
    "// === TESTING ===": "",
    "test": "npm run test:backend && npm run test:frontend",
    "test:backend": "docker-compose exec backend python manage.py test",
    "test:frontend": "docker-compose exec frontend npm test",
    "test:coverage": "docker-compose exec backend coverage run --source='.' manage.py test && docker-compose exec backend coverage report",
    "test:e2e": "cd tests/e2e && npm run test:e2e",
    "test:load": "cd tests/load && locust --host=http://localhost:8000",
    
    "// === LINTING Y FORMATTING ===": "",
    "lint": "npm run lint:backend && npm run lint:frontend",
    "lint:backend": "cd backend && flake8 . && black --check . && isort --check-only .",
    "lint:frontend": "npm run frontend:lint",
    "format": "npm run format:backend && npm run format:frontend",
    "format:backend": "cd backend && black . && isort .",
    "format:frontend": "cd frontend && npm run format",
    
    "// === LOGS Y MONITOREO ===": "",
    "logs": "docker-compose logs -f",
    "logs:backend": "docker-compose logs -f backend",
    "logs:frontend": "docker-compose logs -f frontend",
    "logs:postgres": "docker-compose logs -f postgres",
    "logs:redis": "docker-compose logs -f redis",
    
    "// === HEALTH CHECKS ===": "",
    "health": "npm run health:backend && npm run health:frontend",
    "health:backend": "curl -f http://localhost:8000/health/ || echo 'Backend DOWN'",
    "health:frontend": "curl -f http://localhost:3000 || echo 'Frontend DOWN'",
    "health:celery": "cd backend && celery -A config inspect ping || echo 'Celery DOWN'",
    
    "// === SPRINT 2 ESPECÍFICOS ===": "",
    "documents:test": "cd backend && python manage.py test apps.documents",
    "documents:shell": "cd backend && python manage.py shell -c \"from apps.documents.parsers.excel_parser import ExogenaParser; parser = ExogenaParser(); print('Parser loaded successfully')\"",
    "gcs:test": "cd backend && python manage.py shell -c \"from apps.documents.services.storage_service import get_gcs_service; service = get_gcs_service(); print('GCS Service loaded successfully')\"",
    "celery:test-task": "cd backend && python manage.py shell -c \"from apps.documents.tasks import process_document_async; print('Celery tasks imported successfully')\"",
    
    "// === UTILIDADES ===": "",
    "setup:sprint2": "bash scripts/setup_sprint2.sh",
    "setup:sprint2:windows": "powershell -ExecutionPolicy Bypass -File scripts/setup_sprint2.ps1",
    "verify:sprint2": "bash scripts/verify_sprint2.sh",
    "verify:sprint2:windows": "powershell -ExecutionPolicy Bypass -File scripts/verify_sprint2.ps1",
    "create:superuser": "cd backend && python manage.py createsuperuser",
    "shell:django": "npm run backend:shell",
    "shell:db": "npm run db:shell",
    "urls": "cd backend && python manage.py show_urls",
    "version": "echo 'AccountIA v1.0.0 - Sprint 2'",
    "help": "echo 'Available commands:' && npm run | grep -E '^  [a-z]' | sort",
    
    "// === LEGACY SCRIPTS ===": "",
    "ai:update-kb": "docker-compose exec backend python manage.py update_knowledge_base",
    "ai:test": "docker-compose exec backend python manage.py test_ai_integration",
    "ai:process-docs": "docker-compose exec backend python scripts/process_documents.py",
    "gcs:test:docker": "docker-compose exec backend python /app/scripts/verify_gcs_docker.py",
    "gcs:test:host": "python scripts/verify_gcs.py",
    "gcs:setup": "echo 'Configura Google Cloud Storage siguiendo la documentación'",
    "redis:cli": "docker-compose exec redis redis-cli",
    "redis:monitor": "docker-compose exec redis redis-cli monitor",
    "celery:test:docker": "docker-compose exec backend python /app/scripts/verify_services_docker.py",
    "celery:test:host": "python scripts/verify_celery.py",
    "verify:services": "docker-compose exec backend python /app/scripts/verify_services_docker.py",
    "verify:gcs": "docker-compose exec backend python /app/scripts/verify_gcs_docker.py",
    "verify:all": "npm run verify:services && npm run verify:gcs",
    "docs": "docker-compose exec backend python manage.py spectacular --file docs/api/openapi.yaml",
    "docs:serve": "cd docs && python -m http.server 8080",
    "monitoring": "docker-compose --profile monitoring up -d prometheus grafana",
    "deploy:dev": "./scripts/deploy.sh dev",
    "deploy:staging": "./scripts/deploy.sh staging",
    "deploy:prod": "./scripts/deploy.sh prod",
    "install:frontend": "docker-compose exec frontend npm install",
    "install:backend": "docker-compose exec backend pip install -r requirements.txt",
    "collectstatic": "docker-compose exec backend python manage.py collectstatic --noinput",
    "debug": "node scripts/debug-info.js"
  },
  "devDependencies": {
    "chalk": "^4.1.2",
    "inquirer": "^8.2.4",
    "shelljs": "^0.8.5",
    "concurrently": "^7.6.0"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "keywords": [
    "accountia",
    "declaracion-renta",
    "colombia",
    "django",
    "react",
    "ai",
    "fintech",
    "legaltech"
  ],
  "author": "AccountIA Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/tu-org/accountia.git"
  }
}
