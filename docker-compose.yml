# ================================
# AccountIA - Docker Compose Development
# ================================

services:
  # ================================
  # Database Services
  # ================================
  
  postgres:
    image: postgres:16-alpine
    container_name: accountia_postgres
    environment:
      POSTGRES_DB: accountia_dev
      POSTGRES_USER: accountia_user
      POSTGRES_PASSWORD: accountia_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/scripts/init-database.sql:/docker-entrypoint-initdb.d/init-database.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U accountia_user -d accountia_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - accountia_network

  redis:
    image: redis:7-alpine
    container_name: accountia_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - accountia_network

  # ================================
  # Backend Services
  # ================================

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: accountia_backend
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z postgres 5432; do
          echo 'Waiting for postgres...'
          sleep 1
        done &&
        echo 'Database is ready!' &&
        echo 'Running migrations...' &&
        python manage.py migrate --noinput &&
        echo 'Collecting static files...' &&
        python manage.py collectstatic --noinput &&
        echo 'Starting development server...' &&
        python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
      - ./backend/config/credentials:/app/config/credentials:ro
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DATABASE_URL=postgresql://accountia_user:accountia_password@postgres:5432/accountia_dev
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - SECRET_KEY=dev-secret-key-change-in-production
      - GOOGLE_CLOUD_PROJECT=accountia-dev-0001
      - GCS_BUCKET_NAME=accountia-dev-documents-0001
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/credentials/google-cloud-credentials.json
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - USE_MOCK_STORAGE=true
      - MOCK_STORAGE_PATH=/app/mock_storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - accountia_network

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: accountia_celery_worker
    command: celery -A config.celery worker -l info --without-heartbeat --without-gossip --without-mingle
    volumes:
      - ./backend:/app
      - backend_media:/app/media
      - ./backend/config/credentials:/app/config/credentials:ro
    environment:
      - DEBUG=1
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DATABASE_URL=postgresql://accountia_user:accountia_password@postgres:5432/accountia_dev
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - GOOGLE_CLOUD_PROJECT=accountia-dev-0001
      - GCS_BUCKET_NAME=accountia-dev-documents-0001
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/credentials/google-cloud-credentials.json
      - USE_MOCK_STORAGE=true
      - MOCK_STORAGE_PATH=/app/mock_storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - accountia_network

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: accountia_celery_beat
    command: celery -A config.celery beat -l info --schedule=/app/celerybeat-schedule/schedule.db --pidfile=/app/celerybeat-schedule/celerybeat.pid
    volumes:
      - ./backend:/app
      - celery_beat_data:/app/celerybeat-schedule
      - ./backend/config/credentials:/app/config/credentials:ro
    environment:
      - DEBUG=1
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DATABASE_URL=postgresql://accountia_user:accountia_password@postgres:5432/accountia_dev
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - GOOGLE_CLOUD_PROJECT=accountia-dev-0001
      - GCS_BUCKET_NAME=accountia-dev-documents-0001
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/credentials/google-cloud-credentials.json
      - USE_MOCK_STORAGE=true
      - MOCK_STORAGE_PATH=/app/mock_storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - accountia_network

  # ================================
  # Frontend Services
  # ================================

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: accountia_frontend
    command: npm run dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000/api/v1
      - VITE_APP_TITLE=AccountIA - Development
      - VITE_FIREBASE_API_KEY=${VITE_FIREBASE_API_KEY}
      - VITE_FIREBASE_AUTH_DOMAIN=${VITE_FIREBASE_AUTH_DOMAIN}
      - VITE_FIREBASE_PROJECT_ID=${VITE_FIREBASE_PROJECT_ID}
      - VITE_FIREBASE_STORAGE_BUCKET=${VITE_FIREBASE_STORAGE_BUCKET}
      - VITE_FIREBASE_MESSAGING_SENDER_ID=${VITE_FIREBASE_MESSAGING_SENDER_ID}
      - VITE_FIREBASE_APP_ID=${VITE_FIREBASE_APP_ID}
      - VITE_FIREBASE_MEASUREMENT_ID=${VITE_FIREBASE_MEASUREMENT_ID}
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - accountia_network

  # ================================
  # Development Tools
  # ================================

  mailhog:
    image: mailhog/mailhog:latest
    container_name: accountia_mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - accountia_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: accountia_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@accountia.dev
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - accountia_network

  # ================================
  # Monitoring (Optional for Dev)
  # ================================

  prometheus:
    image: prom/prometheus:latest
    container_name: accountia_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - accountia_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: accountia_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - accountia_network
    profiles:
      - monitoring

# ================================
# Networks
# ================================

networks:
  accountia_network:
    driver: bridge
    name: accountia_network

# ================================
# Volumes
# ================================

volumes:
  postgres_data:
    name: accountia_postgres_data
  redis_data:
    name: accountia_redis_data
  backend_static:
    name: accountia_backend_static
  backend_media:
    name: accountia_backend_media
  celery_beat_data:
    name: accountia_celery_beat_data
  pgadmin_data:
    name: accountia_pgadmin_data
  prometheus_data:
    name: accountia_prometheus_data
  grafana_data:
    name: accountia_grafana_data
