import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { ArrowLeft, ArrowRight, CheckCircle } from 'lucide-react';\nimport { Button } from '../components/ui/Button';\nimport { Card } from '../components/ui/Card';\nimport { Alert } from '../components/ui/Alert';\nimport { LoadingSpinner } from '../components/ui/LoadingSpinner';\nimport FileUpload from '../components/declarations/FileUpload';\nimport ProcessingStatus from '../components/declarations/ProcessingStatus';\nimport DataReview from '../components/declarations/DataReview';\nimport declarationService, { Declaration } from '../services/declarationService';\nimport documentService, { Document } from '../services/documentService';\n\nenum WizardStep {\n  UPLOAD = 'upload',\n  PROCESSING = 'processing',\n  REVIEW = 'review',\n  COMPLETE = 'complete'\n}\n\nconst DeclarationWizard: React.FC = () => {\n  const { declarationId } = useParams<{ declarationId: string }>();\n  const navigate = useNavigate();\n  \n  const [currentStep, setCurrentStep] = useState<WizardStep>(WizardStep.UPLOAD);\n  const [declaration, setDeclaration] = useState<Declaration | null>(null);\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [processingStatus, setProcessingStatus] = useState('');\n\n  // Cargar declaración y documentos al montar el componente\n  useEffect(() => {\n    if (declarationId) {\n      loadDeclarationData();\n    }\n  }, [declarationId]);\n\n  // Polling para verificar el estado del procesamiento\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    \n    if (currentStep === WizardStep.PROCESSING) {\n      interval = setInterval(() => {\n        checkProcessingStatus();\n      }, 3000); // Verificar cada 3 segundos\n    }\n    \n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [currentStep]);\n\n  const loadDeclarationData = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      if (!declarationId) {\n        throw new Error('ID de declaración no encontrado');\n      }\n\n      // Cargar declaración\n      const declarationData = await declarationService.getById(declarationId);\n      setDeclaration(declarationData);\n\n      // Cargar documentos\n      await loadDocuments();\n      \n      // Determinar el paso actual basado en el estado\n      await determineCurrentStep();\n      \n    } catch (err: any) {\n      console.error('Error loading declaration data:', err);\n      setError(err.message || 'Error cargando declaración');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadDocuments = async () => {\n    try {\n      if (!declarationId) return;\n      \n      const documentsData = await documentService.getByDeclaration(declarationId);\n      setDocuments(documentsData);\n    } catch (err) {\n      console.error('Error loading documents:', err);\n    }\n  };\n\n  const determineCurrentStep = async () => {\n    try {\n      if (!declarationId) return;\n      \n      const hasProcessedExogena = await documentService.hasProcessedExogena(declarationId);\n      \n      if (hasProcessedExogena) {\n        setCurrentStep(WizardStep.REVIEW);\n      } else {\n        const exogenaDoc = documents.find(doc => doc.file_type === 'exogena_report');\n        \n        if (!exogenaDoc) {\n          setCurrentStep(WizardStep.UPLOAD);\n        } else if (exogenaDoc.upload_status === 'processing') {\n          setCurrentStep(WizardStep.PROCESSING);\n          setProcessingStatus('Procesando archivo...');\n        } else if (exogenaDoc.upload_status === 'error') {\n          setCurrentStep(WizardStep.UPLOAD);\n          setError('Error procesando archivo. Por favor, inténtalo de nuevo.');\n        } else {\n          setProcessingStatus('Procesando archivo...');\n        }\n      }\n    } catch (err) {\n      console.error('Error determining current step:', err);\n    }\n  };\n\n  const checkProcessingStatus = async () => {\n    try {\n      if (!declarationId) return;\n      \n      await loadDocuments();\n      const exogenaDoc = documents.find(doc => doc.file_type === 'exogena_report');\n      \n      if (exogenaDoc) {\n        if (exogenaDoc.upload_status === 'processed') {\n          setCurrentStep(WizardStep.REVIEW);\n          setProcessingStatus('¡Procesamiento completado!');\n        } else if (exogenaDoc.upload_status === 'error') {\n          setCurrentStep(WizardStep.UPLOAD);\n          setError('Error procesando archivo. Por favor, inténtalo de nuevo.');\n        } else {\n          setProcessingStatus('Procesando archivo...');\n        }\n      }\n    } catch (err) {\n      console.error('Error checking processing status:', err);\n    }\n  };\n\n  // Handlers de eventos\n  const handleFileUploaded = async (documentId: string) => {\n    try {\n      setCurrentStep(WizardStep.PROCESSING);\n      setUploadProgress(100);\n      setProcessingStatus('Archivo subido, iniciando procesamiento...');\n        \n      // Recargar documentos\n      await loadDocuments();\n    } catch (err) {\n      setError('Error después de subir archivo');\n      console.error('Error handling file upload:', err);\n    }\n  };\n\n  const handleUploadProgress = (progress: number) => {\n    setUploadProgress(progress);\n  };\n\n  const handleReprocess = async () => {\n    const exogenaDoc = documents.find(doc => doc.file_type === 'exogena_report');\n    if (!exogenaDoc) return;\n      \n    try {\n      await documentService.reprocess(exogenaDoc.id);\n      setCurrentStep(WizardStep.PROCESSING);\n      setError(null);\n    } catch (err) {\n      setError('Error iniciando re-procesamiento');\n      console.error('Error reprocessing:', err);\n    }\n  };\n\n  const handleContinueToReview = () => {\n    setCurrentStep(WizardStep.REVIEW);\n  };\n\n  const handleBackToUpload = () => {\n    setCurrentStep(WizardStep.UPLOAD);\n    setError(null);\n  };\n\n  const handleCompleteDeclaration = async () => {\n    try {\n      if (!declaration) return;\n      \n      await declarationService.markAsCompleted(declaration.id);\n      setCurrentStep(WizardStep.COMPLETE);\n    } catch (err) {\n      setError('Error completando declaración');\n      console.error('Error completing declaration:', err);\n    }\n  };\n\n  // Renderizado condicional por paso\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case WizardStep.UPLOAD:\n        return (\n          <FileUpload\n            declarationId={declarationId!}\n            onFileUploaded={handleFileUploaded}\n            onUploadProgress={handleUploadProgress}\n            existingDocuments={documents}\n            onReprocess={handleReprocess}\n          />\n        );\n          \n      case WizardStep.PROCESSING:\n        return (\n          <ProcessingStatus\n            status={processingStatus}\n            progress={uploadProgress}\n            onCheckStatus={checkProcessingStatus}\n          />\n        );\n          \n      case WizardStep.REVIEW:\n        const exogenaDoc = documents.find(doc =>\n          doc.file_type === 'exogena_report' && doc.upload_status === 'processed'\n        );\n          \n        return (\n          <DataReview\n            declarationId={declarationId!}\n            document={exogenaDoc}\n            onComplete={handleCompleteDeclaration}\n            onBackToUpload={handleBackToUpload}\n          />\n        );\n          \n      case WizardStep.COMPLETE:\n        return (\n          <Card className=\"p-8 text-center\">\n            <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-6\" />\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              ¡Declaración Completada!\n            </h2>\n            <p className=\"text-gray-600 mb-6\">\n              Tu declaración de renta ha sido procesada exitosamente.\n            </p>\n            <div className=\"flex justify-center space-x-4\">\n              <Button\n                onClick={() => navigate('/app/declarations')}\n                variant=\"outline\"\n              >\n                Ver Todas las Declaraciones\n              </Button>\n              <Button\n                onClick={() => navigate('/app')}\n              >\n                Ir al Dashboard\n              </Button>\n            </div>\n          </Card>\n        );\n          \n      default:\n        return null;\n    }\n  };\n\n  const getStepNumber = (step: WizardStep): number => {\n    switch (step) {\n      case WizardStep.UPLOAD: return 1;\n      case WizardStep.PROCESSING: return 2;\n      case WizardStep.REVIEW: return 3;\n      case WizardStep.COMPLETE: return 4;\n      default: return 1;\n    }\n  };\n\n  const getStepTitle = (step: WizardStep): string => {\n    switch (step) {\n      case WizardStep.UPLOAD: return 'Subir Documentos';\n      case WizardStep.PROCESSING: return 'Procesamiento';\n      case WizardStep.REVIEW: return 'Revisar Información';\n      case WizardStep.COMPLETE: return 'Completado';\n      default: return '';\n    }\n  };\n\n  const isStepCompleted = (step: WizardStep): boolean => {\n    const currentStepNumber = getStepNumber(currentStep);\n    const stepNumber = getStepNumber(step);\n    return stepNumber < currentStepNumber || currentStep === WizardStep.COMPLETE;\n  };\n\n  const isStepCurrent = (step: WizardStep): boolean => {\n    return step === currentStep;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"large\" />\n      </div>\n    );\n  }\n\n  if (!declaration) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"p-8 text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n            Declaración no encontrada\n          </h2>\n          <Button onClick={() => navigate('/app')}>\n            Volver al Dashboard\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => navigate('/app')}\n                className=\"flex items-center\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Volver\n              </Button>\n              <div>\n                <h1 className=\"text-lg font-semibold text-gray-900\">\n                  Declaración de Renta {declaration.fiscal_year}\n                </h1>\n                <p className=\"text-sm text-gray-600\">\n                  {getStepTitle(currentStep)}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stepper */}\n        <div className=\"mb-8\">\n          <nav aria-label=\"Progress\">\n            <ol className=\"flex items-center\">\n              {Object.values(WizardStep).filter(step => step !== WizardStep.COMPLETE).map((step, index) => {\n                const stepNumber = getStepNumber(step);\n                const isCompleted = isStepCompleted(step);\n                const isCurrent = isStepCurrent(step);\n                const isLast = index === Object.values(WizardStep).filter(s => s !== WizardStep.COMPLETE).length - 1;\n\n                return (\n                  <li key={step} className={`relative ${!isLast ? 'pr-8 sm:pr-20' : ''}`}>\n                    {!isLast && (\n                      <div className=\"absolute inset-0 flex items-center\" aria-hidden=\"true\">\n                        <div className={`h-0.5 w-full ${\n                          isCompleted ? 'bg-blue-600' : 'bg-gray-200'\n                        }`} />\n                      </div>\n                    )}\n                    <div className=\"relative flex items-center justify-center\">\n                      {isCompleted ? (\n                        <div className=\"h-8 w-8 rounded-full bg-blue-600 flex items-center justify-center\">\n                          <CheckCircle className=\"w-5 h-5 text-white\" />\n                        </div>\n                      ) : isCurrent ? (\n                        <div className=\"h-8 w-8 rounded-full border-2 border-blue-600 bg-white flex items-center justify-center\">\n                          <span className=\"h-2.5 w-2.5 rounded-full bg-blue-600\" />\n                        </div>\n                      ) : (\n                        <div className=\"h-8 w-8 rounded-full border-2 border-gray-300 bg-white flex items-center justify-center\">\n                          <span className=\"h-2.5 w-2.5 rounded-full bg-transparent\" />\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"absolute top-10 left-1/2 transform -translate-x-1/2\">\n                      <span className={`text-xs font-medium ${\n                        isCurrent ? 'text-blue-600' : isCompleted ? 'text-gray-900' : 'text-gray-500'\n                      }`}>\n                        {getStepTitle(step)}\n                      </span>\n                    </div>\n                  </li>\n                );\n              })}\n            </ol>\n          </nav>\n        </div>\n\n        {/* Error Alert */}\n        {error && (\n          <Alert type=\"error\" className=\"mb-6\">\n            <span>{error}</span>\n          </Alert>\n        )}\n\n        {/* Step Content */}\n        <div className=\"space-y-6\">\n          {renderStepContent()}\n        </div>\n\n        {/* Navigation (only show in certain steps) */}\n        {(currentStep === WizardStep.REVIEW) && (\n          <div className=\"mt-8 flex justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={handleBackToUpload}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver a Subir Archivo\n            </Button>\n            \n            <Button\n              onClick={handleCompleteDeclaration}\n            >\n              Completar Declaración\n              <ArrowRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DeclarationWizard;