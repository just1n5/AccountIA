import api from './api';\n\n// Tipos de datos\nexport interface Declaration {\n  id: string;\n  user_id: string;\n  fiscal_year: number;\n  status: string;\n  status_display: string;\n  summary_data?: {\n    total_income: number;\n    total_withholdings: number;\n    preliminary_tax: number;\n  };\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreateDeclarationRequest {\n  fiscal_year: number;\n}\n\nexport interface UpdateDeclarationRequest {\n  status?: string;\n  summary_data?: {\n    total_income?: number;\n    total_withholdings?: number;\n    preliminary_tax?: number;\n  };\n}\n\nexport interface DeclarationListResponse {\n  results: Declaration[];\n  count: number;\n  next?: string;\n  previous?: string;\n}\n\nexport interface DashboardStats {\n  current_year_declaration?: Declaration;\n  total_declarations: number;\n  processed_declarations: number;\n  pending_declarations: number;\n  total_income_current_year: number;\n  potential_savings: number;\n}\n\nexport interface OptimizationRecommendation {\n  id: string;\n  type: string;\n  title: string;\n  description: string;\n  potential_savings: number;\n  difficulty: 'easy' | 'medium' | 'hard';\n  status: 'pending' | 'applied' | 'dismissed';\n  details?: any;\n}\n\nexport interface OptimizationRecommendationsResponse {\n  declaration_id: string;\n  recommendations: OptimizationRecommendation[];\n  total_potential_savings: number;\n  applied_savings: number;\n}\n\n/**\n * Servicio para gestión de declaraciones\n */\nclass DeclarationService {\n  private readonly baseUrl = '/api/v1';\n\n  /**\n   * Obtiene todas las declaraciones del usuario\n   */\n  async list(params?: {\n    page?: number;\n    page_size?: number;\n    fiscal_year?: number;\n    status?: string;\n  }): Promise<DeclarationListResponse> {\n    try {\n      const queryParams = new URLSearchParams();\n      if (params?.page) queryParams.append('page', params.page.toString());\n      if (params?.page_size) queryParams.append('page_size', params.page_size.toString());\n      if (params?.fiscal_year) queryParams.append('fiscal_year', params.fiscal_year.toString());\n      if (params?.status) queryParams.append('status', params.status);\n      \n      const url = `${this.baseUrl}/declarations/${queryParams.toString() ? '?' + queryParams.toString() : ''}`;\n      const response = await api.get<DeclarationListResponse>(url);\n      return response;\n    } catch (error: any) {\n      console.error('Error listing declarations:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error obteniendo declaraciones'\n      );\n    }\n  }\n\n  /**\n   * Obtiene una declaración específica\n   */\n  async getById(id: string): Promise<Declaration> {\n    try {\n      const response = await api.get<Declaration>(\n        `${this.baseUrl}/declarations/${id}/`\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error getting declaration:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error obteniendo declaración'\n      );\n    }\n  }\n\n  /**\n   * Crea una nueva declaración\n   */\n  async create(request: CreateDeclarationRequest): Promise<Declaration> {\n    try {\n      const response = await api.post<Declaration>(\n        `${this.baseUrl}/declarations/`,\n        request\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error creating declaration:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error creando declaración'\n      );\n    }\n  }\n\n  /**\n   * Actualiza una declaración existente\n   */\n  async update(id: string, request: UpdateDeclarationRequest): Promise<Declaration> {\n    try {\n      const response = await api.patch<Declaration>(\n        `${this.baseUrl}/declarations/${id}/`,\n        request\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error updating declaration:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error actualizando declaración'\n      );\n    }\n  }\n\n  /**\n   * Elimina una declaración\n   */\n  async delete(id: string): Promise<void> {\n    try {\n      await api.delete(`${this.baseUrl}/declarations/${id}/`);\n    } catch (error: any) {\n      console.error('Error deleting declaration:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error eliminando declaración'\n      );\n    }\n  }\n\n  /**\n   * Obtiene estadísticas del dashboard\n   */\n  async getDashboardStats(): Promise<DashboardStats> {\n    try {\n      const response = await api.get<DashboardStats>(\n        `${this.baseUrl}/declarations/dashboard_stats/`\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error getting dashboard stats:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error obteniendo estadísticas'\n      );\n    }\n  }\n\n  /**\n   * Obtiene la declaración del año actual\n   */\n  async getCurrentYearDeclaration(): Promise<Declaration | null> {\n    try {\n      const currentYear = new Date().getFullYear();\n      const response = await this.list({ \n        fiscal_year: currentYear, \n        page_size: 1 \n      });\n      return response.results.length > 0 ? response.results[0] : null;\n    } catch (error) {\n      console.error('Error getting current year declaration:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Marca una declaración como completada\n   */\n  async markAsCompleted(id: string): Promise<Declaration> {\n    try {\n      const response = await api.post<Declaration>(\n        `${this.baseUrl}/declarations/${id}/mark_completed/`\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error marking declaration as completed:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error marcando declaración como completada'\n      );\n    }\n  }\n\n  /**\n   * Procesa una declaración con IA\n   */\n  async processWithAI(id: string): Promise<{ message: string; task_id?: string }> {\n    try {\n      const response = await api.post(\n        `${this.baseUrl}/declarations/${id}/ai_process/`\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error processing with AI:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error procesando con IA'\n      );\n    }\n  }\n\n  /**\n   * Obtiene recomendaciones de optimización\n   */\n  async getOptimizationRecommendations(id: string): Promise<OptimizationRecommendationsResponse> {\n    try {\n      const response = await api.get<OptimizationRecommendationsResponse>(\n        `${this.baseUrl}/declarations/${id}/optimization_recommendations/`\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error getting optimization recommendations:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error obteniendo recomendaciones'\n      );\n    }\n  }\n\n  /**\n   * Aplica una recomendación de optimización\n   */\n  async applyRecommendation(declarationId: string, recommendationId: string): Promise<void> {\n    try {\n      await api.post(\n        `${this.baseUrl}/declarations/${declarationId}/apply_recommendation/`,\n        { recommendation_id: recommendationId }\n      );\n    } catch (error: any) {\n      console.error('Error applying recommendation:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error aplicando recomendación'\n      );\n    }\n  }\n\n  /**\n   * Rechaza una recomendación de optimización\n   */\n  async dismissRecommendation(declarationId: string, recommendationId: string): Promise<void> {\n    try {\n      await api.post(\n        `${this.baseUrl}/declarations/${declarationId}/dismiss_recommendation/`,\n        { recommendation_id: recommendationId }\n      );\n    } catch (error: any) {\n      console.error('Error dismissing recommendation:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error rechazando recomendación'\n      );\n    }\n  }\n\n  /**\n   * Genera el borrador de declaración en formato oficial\n   */\n  async generateDraft(id: string): Promise<{ download_url: string; expires_in: number }> {\n    try {\n      const response = await api.post(\n        `${this.baseUrl}/declarations/${id}/generate_draft/`\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error generating draft:', error);\n      throw new Error(\n        error.response?.data?.error ||\n        'Error generando borrador'\n      );\n    }\n  }\n\n  /**\n   * Verifica si una declaración se puede editar\n   */\n  isEditable(declaration: Declaration): boolean {\n    return ['draft', 'in_progress', 'review'].includes(declaration.status);\n  }\n\n  /**\n   * Verifica si una declaración se puede procesar\n   */\n  canProcess(declaration: Declaration): boolean {\n    return ['draft', 'in_progress'].includes(declaration.status);\n  }\n\n  /**\n   * Verifica si una declaración está completa\n   */\n  isCompleted(declaration: Declaration): boolean {\n    return ['completed', 'filed'].includes(declaration.status);\n  }\n\n  /**\n   * Obtiene el color del estado para la UI\n   */\n  getStatusColor(status: string): string {\n    const statusColors: Record<string, string> = {\n      'draft': 'bg-gray-100 text-gray-800',\n      'in_progress': 'bg-blue-100 text-blue-800',\n      'review': 'bg-yellow-100 text-yellow-800',\n      'processing': 'bg-purple-100 text-purple-800',\n      'completed': 'bg-green-100 text-green-800',\n      'filed': 'bg-green-100 text-green-800',\n      'error': 'bg-red-100 text-red-800'\n    };\n    return statusColors[status] || 'bg-gray-100 text-gray-800';\n  }\n\n  /**\n   * Obtiene el label del estado en español\n   */\n  getStatusLabel(status: string): string {\n    const statusLabels: Record<string, string> = {\n      'draft': 'Borrador',\n      'in_progress': 'En Progreso',\n      'review': 'En Revisión',\n      'processing': 'Procesando',\n      'completed': 'Completada',\n      'filed': 'Presentada',\n      'error': 'Error'\n    };\n    return statusLabels[status] || status;\n  }\n}\n\n// Instancia singleton del servicio\nexport const declarationService = new DeclarationService();\nexport default declarationService;